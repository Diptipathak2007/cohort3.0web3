{
	"id": "a15104973c7937935147d2cb38c31791",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.30",
	"solcLongVersion": "0.8.30+commit.73712a01",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Learning.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n//contract to understand variables\n\n/*contract sum{\n    uint8 num=0;\n    uint32 biggernumber=0;\n    int negativenumber=-10000;\n    address harkirat=0xbF418c1822274015B142715799C24B4Cb576866e;\n}*/\n\n\n//contract to understand constructor\n/*contract calculator{\n    uint256 currentvalue;\n    constructor (uint256 payablevalue){\n        currentvalue=payablevalue;//set the intiial value it is done to avoid the name conflict\n    }\n    function add(uint256 _value)public{\n        currentvalue+=_value;\n    }\n    function sub(uint256 _value)public{\n        currentvalue-=_value;\n    }\n    function mul(uint _value)public{\n        currentvalue*= _value;\n    }\n    function div(uint _value)public{\n        require(_value!=0,\"cannot divide by zero\");\n        currentvalue/=_value;\n    }\n    function getValue()public view returns(uint256) {\n        return currentvalue;\n    }\n   \n}*/\n\n//contract that helps you understand inheritance\n/*contract Vehicle{\n    string public brand;\n\n    constructor(string memory _brand){\n        brand=_brand;\n    }\n    function description()public pure virtual returns (string memory){\n        return \"this is a vehicle\";//virtual simply means that the function can be overridden by a child class child class will write overwrite instead of virtual\n    }\n}*/\n\n//child contract of this\n//import \"./Vehicle.sol\"\n//const car is Vehicle{\n    //constructor(string memory _brand)Vehicle(_brand){\n        //brand=_brand;\n    //}\n    //function description()public pure override returns(string memory){\n        //return \"this is a car\";\n    //}\n//}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"sources": {
			"contracts/Learning.sol": {
				"ast": {
					"absolutePath": "contracts/Learning.sol",
					"exportedSymbols": {},
					"id": 2,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:0"
						}
					],
					"src": "32:1589:0"
				},
				"id": 0
			}
		}
	}
}